package com.example.demo.mock;

import com.example.demo.post.domain.Post;
import com.example.demo.post.service.port.PostRepository;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;

public class FakePostRepository implements PostRepository {

	private final AtomicLong autoGeneratedId = new AtomicLong(0);
	// 혹시 모르는 병렬 처리를 대비해서 synchronizedList로 선언
	// 사실 소형테스트는 단일 스레드 동작이므로 동기화를 걱정할 필요가 없음
	private final List<Post> data = Collections.synchronizedList(new ArrayList<>());

	@Override
	public Optional<Post> findById(long id) {
		return data.stream()
		           .filter(item -> item.getId()
		                               .equals(id))
		           .findAny();
	}

	@Override
	public Post save(Post post) {
		if (post.getId() == null || post.getId() == 0) {
			Post newPost = Post.builder()
			                   .id(autoGeneratedId.incrementAndGet())
			                   .content(post.getContent())
			                   .createdAt(post.getCreatedAt())
			                   .modifiedAt(post.getModifiedAt())
			                   .writer(post.getWriter())
			                   .build();
			data.add(newPost);
			return newPost;
		} else {
			data.removeIf(item -> Objects.equals(item.getId(), post.getId()));
			data.add(post);
			return post;
		}
	}
}
